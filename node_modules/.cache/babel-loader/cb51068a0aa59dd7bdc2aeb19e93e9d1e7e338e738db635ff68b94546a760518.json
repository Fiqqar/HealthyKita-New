{"ast":null,"code":"import axios from 'axios';\nimport textFile from '!!raw-loader!./file.txt';\nlet arr;\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      arr: textFile,\n      loginData: {\n        username: \"\",\n        password: \"\",\n        rememberMe: false\n      },\n      success: false,\n      error: false,\n      response: {}\n    };\n  },\n  methods: {\n    loginMethods() {\n      this.success = false;\n      this.error = false;\n      const {\n        username,\n        password,\n        rememberMe\n      } = this.loginData;\n      if (!username || !password) {\n        alert(\"Please fill out all required fields.\");\n        return;\n      }\n      axios.post(`${this.arr}/api/login/user`, {\n        username: username,\n        password: password,\n        remember: rememberMe\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true\n      }).then(response => {\n        this.success = true;\n        this.response = response.data;\n        this.userData = {\n          username: \"\",\n          email: \"\",\n          password: \"\",\n          confirmpw: \"\"\n        };\n        this.loading = false; // Stop loading when request is successful\n\n        const encKeyFetch = axios.get(`${arr}/oauth/encKey/get`, {\n          withCredentials: true\n        });\n        const encKey = encKeyFetch.data.encKey;\n        const ivKey = encKeyFetch.data.ivKey;\n        const dbRequest = indexedDB.open('userKeysDB', 1);\n        dbRequest.onupgradeneeded = event => {\n          let db = event.target.result;\n          if (!db.objectStoreNames.contains('keys')) {\n            db.createObjectStore('keys', {\n              keyPath: 'id'\n            });\n          }\n        };\n        dbRequest.onsuccess = event => {\n          const db = event.target.result;\n          const transaction = db.transaction('keys', 'readwrite');\n          const store = transaction.objectStore('keys');\n          store.put({\n            id: 'encKey',\n            value: encKey\n          });\n          store.put({\n            id: 'ivKey',\n            value: ivKey\n          });\n          transaction.oncomplete = () => {\n            console.log('encKey and ivKey stored successfully');\n          };\n        };\n        dbRequest.onerror = event => {\n          console.error('Error on opening IndexedDB:', event.target.error);\n        };\n      }).catch(error => {\n        this.error = true;\n        console.error(\"There was an error:\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","textFile","arr","name","data","loginData","username","password","rememberMe","success","error","response","methods","loginMethods","alert","post","remember","headers","withCredentials","then","userData","email","confirmpw","loading","encKeyFetch","get","encKey","ivKey","dbRequest","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","put","id","value","oncomplete","console","log","onerror","catch"],"sources":["C:\\xampp\\htdocs\\Healthy-Kita-1\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"container-fluid bg-light min-vh-100 d-flex align-items-center justify-content-center py-5\">\r\n        <div class=\"card shadow-sm\" style=\"max-width: 400px;\">\r\n            <div class=\"card-body p-4\">\r\n                <div class=\"text-center mb-4\">\r\n                    <h2 class=\"fw-bold\">Login</h2>\r\n                    <p class=\"text-muted\">\r\n                        Atau\r\n                        <router-link to=\"/register\" class=\"text-success text-decoration-none\">\r\n                            Buat Akun Baru\r\n                        </router-link>\r\n                    </p>\r\n                </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"username\" class=\"form-label\">Username</label>\r\n                        <input type=\"text\" class=\"form-control\" id=\"username\" required placeholder=\"Masukkan nama mu\"\r\n                            v-model=\"loginData.username\" />\r\n                    </div>\r\n\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"password\" class=\"form-label\">Password</label>\r\n                        <input type=\"password\" class=\"form-control\" id=\"password\" required\r\n                            placeholder=\"Masukkan Password\" v-model=\"loginData.password\" />\r\n                    </div>\r\n\r\n                    <div class=\"mb-3 d-flex justify-content-between align-items-center\">\r\n                        <div class=\"form-check me-1\">\r\n                            <input class=\"form-check-input border-success cekboks\" type=\"checkbox\" id=\"remember-me\"\r\n                                value=\"true\" v-model=\"loginData.rememberMe\" />\r\n                            <label class=\"form-check-label\" for=\"remember-me\">\r\n                                Remember me\r\n                            </label>\r\n                        </div>\r\n                        <a href=\"#\" class=\"text-success text-decoration-none\">Lupa password?</a>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" class=\"btn btn-success w-100 animate\" @click=\"loginMethods\">\r\n                        Login\r\n                    </button>\r\n                    <h3 class=\"text-center\" v-if=\"success\">berhasil</h3>\r\n                    <h3 class=\"text-center\" v-if=\"error\">error</h3>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport textFile from '!!raw-loader!./file.txt';\r\nlet arr;\r\nexport default {\r\n    name: 'LoginPage',\r\n    data() {\r\n        return {\r\n            arr: textFile,\r\n            loginData: {\r\n                username: \"\",\r\n                password: \"\",\r\n                rememberMe: false\r\n            },\r\n            success: false,\r\n            error: false,\r\n            response: {}\r\n        }\r\n    },\r\n    methods: {\r\n        loginMethods() {\r\n            this.success = false;\r\n            this.error = false;\r\n            const { username, password, rememberMe } = this.loginData;\r\n            if (!username || !password) {\r\n                alert(\"Please fill out all required fields.\");\r\n                return;\r\n            }\r\n            axios.post(`${this.arr}/api/login/user`, {\r\n                username: username,\r\n                password: password,\r\n                remember: rememberMe\r\n            }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                withCredentials: true\r\n            })\r\n                .then(response => {\r\n                    this.success = true;\r\n                this.response = response.data;\r\n                this.userData = {\r\n                    username: \"\",\r\n                    email: \"\",\r\n                    password: \"\",\r\n                    confirmpw: \"\"\r\n                };\r\n                this.loading = false;  // Stop loading when request is successful\r\n\r\n                const encKeyFetch = axios.get(`${arr}/oauth/encKey/get`,{\r\n                withCredentials: true\r\n                });\r\n                const encKey = encKeyFetch.data.encKey;\r\n                const ivKey = encKeyFetch.data.ivKey;\r\n                const dbRequest = indexedDB.open('userKeysDB', 1);\r\n\r\n                dbRequest.onupgradeneeded = (event) => {\r\n                    let db = event.target.result;\r\n                    if (!db.objectStoreNames.contains('keys')) {\r\n                        db.createObjectStore('keys', { keyPath: 'id' });\r\n                    }\r\n                };\r\n                dbRequest.onsuccess = (event) => {\r\n                    const db = event.target.result;\r\n                    const transaction = db.transaction('keys', 'readwrite');\r\n                    const store = transaction.objectStore('keys');\r\n                    store.put({ id: 'encKey', value: encKey });\r\n                    store.put({ id: 'ivKey', value: ivKey });\r\n                    transaction.oncomplete = () => {\r\n                        console.log('encKey and ivKey stored successfully');\r\n                    };\r\n                };\r\n\r\n        dbRequest.onerror = (event) => {\r\n            console.error('Error on opening IndexedDB:', event.target.error);\r\n        };\r\n                })\r\n                .catch(error => {\r\n                    this.error = true;\r\n                    console.error(\"There was an error:\", error);\r\n                });\r\n\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.animate {\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n.animate:hover {\r\n    transform: scale(1.05);\r\n}\r\n\r\n.animate:active {\r\n    transform: scale(0.95);\r\n}\r\n\r\n.cekboks {\r\n    cursor: pointer;\r\n}\r\n\r\n.card {\r\n    border-radius: 50px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}